{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import graphqlHttp from 'express-graphql';\nimport crypto from 'crypto';\nimport { compact } from 'lodash';\nimport { Router } from 'express';\n\nimport classFieldsGettersFactory from './factories/classes.fields.factory';\nimport classFileFieldsGettersFactory from './factories/classes.files.fields.factory';\nimport projectFieldsGettersFactory from './factories/project.fields.factory';\nimport { generateSchema, getSchemaJson } from './utils/graphql';\n\nexport default class GraphQLApi {\n  _projectsClasses = {};\n\n  /**\n   * Generate the GraphQl schema\n   * @param storage\n   * @param project\n   * @private\n   */\n  static _getSchema({ storage, project }) {\n    const {\n      getQueryFields: getClassesQueryFields,\n      getMutationFields: getClassesMutationFields,\n    } = project.classes ? classFieldsGettersFactory({ storage, classes: project.classes }) : {};\n\n    const {\n      getQueryFields: getFilesQueryFields,\n      getMutationFields: getFilesMutationFields,\n    } = classFileFieldsGettersFactory({ storage });\n\n    const {\n      getQueryFields: getProjectQueryFields,\n      getMutationFields: getProjectMutationFields,\n    } = projectFieldsGettersFactory({ project });\n\n    return generateSchema({\n      queryFieldsGetters: compact([\n        getClassesQueryFields,\n        getFilesQueryFields,\n        getProjectQueryFields,\n      ]),\n      mutationFieldsGetters: compact([\n        getClassesMutationFields,\n        getFilesMutationFields,\n        getProjectMutationFields,\n      ]),\n    });\n  }\n\n  static validateReq(req) {\n    if (!req.aurora) {\n      throw new Error('Missing Aurora object !');\n    }\n    if (!req.aurora.project) {\n      throw new Error('Missing project data !');\n    }\n    if (!req.aurora.storage) {\n      throw new Error('No storage database connection !');\n    }\n  }\n\n  /**\n   * Return the classes GraphQL schema for a specific project, will be generated if needed\n   * @param project\n   * @param storage\n   * @private\n   */\n  _getClassesForProject({ project, storage }) {\n    const projectHash = project.hash ||\n      crypto.createHash('sha256').update(JSON.stringify(project.classes.definitions)).digest('hex');\n\n    if (!this._projectsClasses[project._id] || this._projectsClasses[project._id].projectHash !== projectHash) {\n      const graphQLSchema = GraphQLApi._getSchema({ storage, project });\n\n      const schemaJSONPromise = getSchemaJson(graphQLSchema);\n\n      this._projectsClasses[project._id] = {\n        schema: graphQLSchema,\n        getSchemaJSON: () => schemaJSONPromise,\n        projectHash,\n      };\n    }\n\n    return this._projectsClasses[project._id];\n  }\n\n  /**\n   * Returns an express middleware of the GraphQL schema\n   */\n  getMiddleware() {\n    const router = new Router();\n\n    const schemaMiddleware = new Router();\n    schemaMiddleware.use((req, res) => {\n      // Will throw if `req` is invalid\n      GraphQLApi.validateReq(req);\n\n      this._getClassesForProject({ project: req.aurora.project, storage: req.aurora.storage })\n        .getSchemaJSON()\n        .then((result) => {\n          res.json(result);\n        });\n    });\n\n    const graphQLMiddleware = graphqlHttp((req) => {\n      // Will throw if `req` is invalid\n      GraphQLApi.validateReq(req);\n\n      return {\n        schema: this._getClassesForProject({ project: req.aurora.project, storage: req.aurora.storage }).schema,\n        rootValue: {\n          allowMutation: req.aurora.allowMutation,\n        },\n        graphiql: true,\n      };\n    });\n\n    router.use('/schema.json', schemaMiddleware);\n    router.use(graphQLMiddleware);\n    return router;\n  }\n}\n"]}