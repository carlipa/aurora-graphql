{"version":3,"sources":["../../src/utils/graphql.js"],"names":[],"mappings":";;;;;QAmBgB,gB,GAAA,gB;QAcA,c,GAAA,c;QA0BA,a,GAAA,a;;AA3DhB;;AACA;;AACA;;AAKA;;AAEA;;AAMA;;;;AAIO,SAAS,gBAAT,CAA0B,IAA1B,EAAgC;AACrC,MAAI,gBAAM,QAAN,CAAe,OAAf,CAAuB,KAAK,QAAL,EAAvB,CAAJ,EAA6C;AAC3C,WAAO,IAAI,gBAAM,QAAV,CAAmB,KAAK,QAAL,EAAnB,CAAP;AACD;;AAED,SAAO,IAAI,gBAAM,QAAV,CAAmB,gCAAa,IAAb,EAAmB,EAAnB,CAAsB,QAAtB,EAAnB,CAAP;AACD;;AAED;;;;;;AAMO,SAAS,cAAT,GAAsF;AAAA,mEAAJ,EAAI;;AAAA,mCAA5D,kBAA4D;AAAA,MAA5D,kBAA4D,yCAAvC,EAAuC;AAAA,mCAAnC,qBAAmC;AAAA,MAAnC,qBAAmC,yCAAX,EAAW;;AAC3F,MAAM,YAAY,SAAZ,SAAY,CAAC,OAAD,EAAa;AAC7B,QAAM,WAAW,qBAAQ,OAAR,IAAmB,OAAnB,GAA6B,CAAC,OAAD,CAA9C;AACA,QAAM,SAAS,EAAf;AACA,aAAS,OAAT,CAAiB,UAAC,EAAD;AAAA,aAAQ,sBAAS,MAAT,EAAiB,IAAjB,CAAR;AAAA,KAAjB;AACA,WAAO,MAAP;AACD,GALD;;AAOA,MAAM,cAAc,UAAU,kBAAV,CAApB;AACA,MAAM,iBAAiB,UAAU,qBAAV,CAAvB;;AAEA,MAAM,YAAY,+BAAsB;AACtC,UAAM,OADgC;AAEtC,YAAQ;AAF8B,GAAtB,CAAlB;AAIA,MAAM,eAAe,+BAAsB;AACzC,UAAM,UADmC;AAEzC,YAAQ;AAFiC,GAAtB,CAArB;;AAKA,SAAO,2BAAkB;AACvB,WAAO,kBAAK,WAAL,EAAkB,MAAlB,GAA2B,SAA3B,GAAuC,IADvB;AAEvB,cAAU,kBAAK,cAAL,EAAqB,MAArB,GAA8B,YAA9B,GAA6C;AAFhC,GAAlB,CAAP;AAID;;AAEM,SAAS,aAAT,CAAuB,MAAvB,EAA+B;AACpC,SAAO,sBAAQ,MAAR,gCAAP;AACD","file":"graphql.js","sourcesContent":["import { Types } from 'mongoose';\nimport { fromGlobalId } from 'graphql-relay';\nimport {\n  graphql,\n  GraphQLObjectType,\n  GraphQLSchema,\n} from 'graphql';\nimport { introspectionQuery } from 'graphql/utilities';\n\nimport {\n  assignIn,\n  keys,\n  isArray,\n} from 'lodash';\n\n/**\n * Extract an ObjectId from a data which can either be a Mongo id or a GraphQL global id\n * @returns {Types.ObjectId}\n */\nexport function objectIdFromData(data) {\n  if (Types.ObjectId.isValid(data.toString())) {\n    return new Types.ObjectId(data.toString());\n  }\n\n  return new Types.ObjectId(fromGlobalId(data).id.toString());\n}\n\n/**\n * Merge multiple query and mutation fields getters and create a GraphQL schema\n * @param queryFieldsGetters\n * @param mutationFieldsGetters\n * @returns {{GraphQLSchema}}\n */\nexport function generateSchema({ queryFieldsGetters = [], mutationFieldsGetters = [] } = {}) {\n  const getFields = (getters) => {\n    const _getters = isArray(getters) ? getters : [getters];\n    const fields = {};\n    _getters.forEach((fn) => assignIn(fields, fn()));\n    return fields;\n  };\n\n  const queryFields = getFields(queryFieldsGetters);\n  const mutationFields = getFields(mutationFieldsGetters);\n\n  const queryType = new GraphQLObjectType({\n    name: 'Query',\n    fields: queryFields,\n  });\n  const mutationType = new GraphQLObjectType({\n    name: 'Mutation',\n    fields: mutationFields,\n  });\n\n  return new GraphQLSchema({\n    query: keys(queryFields).length ? queryType : null,\n    mutation: keys(mutationFields).length ? mutationType : null,\n  });\n}\n\nexport function getSchemaJson(schema) {\n  return graphql(schema, introspectionQuery);\n}\n"]}