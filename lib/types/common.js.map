{"version":3,"sources":["../../src/types/common.js"],"names":[],"mappings":";;;;;;;AAAA;;AAKA;;AAIA;;AAEO,IAAM,sCAAe,+BAAsB;AAChD,QAAM,cAD0C;AAEhD,eAAa,kBAFmC;AAGhD,aAAW,mBAAC,KAAD;AAAA,WAAW,KAAX;AAAA,GAHqC;AAIhD,cAAY,oBAAC,KAAD;AAAA,WAAW,KAAX;AAAA,GAJoC;AAKhD,gBAAc,sBAAC,GAAD,EAAS;AACrB;AACA,QAAI,IAAI,IAAJ,KAAa,eAAK,MAAtB,EAA8B;AAC5B,YAAM,6EAAkE,IAAI,IAAtE,EAA8E,CAAC,GAAD,CAA9E,CAAN;AACD;;AAED,WAAO,gCAAiB,IAAI,KAArB,CAAP;AACD;AAZ+C,CAAtB,CAArB;;AAeA,IAAM,gCAAY,+BAAsB;AAC7C,QAAM,WADuC;AAE7C,eAAa,2BAFgC;AAG7C,aAAW,mBAAC,KAAD;AAAA,WAAW,KAAX;AAAA,GAHkC;AAI7C,cAAY,oBAAC,KAAD;AAAA,WAAW,KAAX;AAAA,GAJiC;AAK7C,gBAAc,sBAAC,GAAD,EAAS;AACrB;AACA,QAAI,IAAI,IAAJ,KAAa,eAAK,MAAtB,EAA8B;AAC5B,YAAM,6EAAkE,IAAI,IAAtE,EAA8E,CAAC,GAAD,CAA9E,CAAN;AACD;AACD,WAAO,KAAK,KAAL,CAAW,IAAI,KAAf,CAAP;AACD;AAX4C,CAAtB,CAAlB","file":"common.js","sourcesContent":["import {\n  GraphQLScalarType,\n  GraphQLError,\n} from 'graphql';\n\nimport {\n  Kind,\n} from 'graphql/language';\n\nimport { objectIdFromData } from '../utils/graphql';\n\nexport const ObjectIDType = new GraphQLScalarType({\n  name: 'ObjectIDType',\n  description: 'A mongo ObjectID',\n  serialize: (value) => value,\n  parseValue: (value) => value,\n  parseLiteral: (ast) => {\n    // istanbul ignore if\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(`Query error: Can only parse String but got a: ${ast.kind}`, [ast]);\n    }\n\n    return objectIdFromData(ast.value);\n  },\n});\n\nexport const MixedType = new GraphQLScalarType({\n  name: 'MixedType',\n  description: 'A plain javascript object',\n  serialize: (value) => value,\n  parseValue: (value) => value,\n  parseLiteral: (ast) => {\n    // istanbul ignore if\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(`Query error: Can only parse String but got a: ${ast.kind}`, [ast]);\n    }\n    return JSON.parse(ast.value);\n  },\n});\n"]}