{"version":3,"sources":["../../src/factories/classes.files.fields.factory.js"],"names":[],"mappings":";;;;;;;;;kBA+DwB,gC;;AA/DxB;;;;AACA;;;;AAEA;;AAKA;;AACA;;;;;;AAEA,mBAAQ,YAAR;;IAEa,U,WAAA,U;AACX;;;AAGA,4BAAyB;AAAA,QAAX,OAAW,QAAX,OAAW;;AAAA;;AACvB,QAAI,CAAC,OAAL,EAAc;AACZ,YAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,SAAK,QAAL,GAAgB,OAAhB;AACD;;;;wCAEmB;AAClB,aAAO,EAAP;AACD;;;qCAEgB;AAAA;;AACf,UAAM,aAAa;AACjB,cAAM,MADW;AAEjB,4BAFiB;AAGjB,cAAM;AACJ,cAAI;AACF,kBAAM;AADJ;AADA,SAHW;AAQjB,iBAAS,iBAAC,CAAD,EAAI,IAAJ;AAAA,iBAAa,MAAK,QAAL,CAAc,KAAd,CAAoB,sBAApB,CAA2C,gCAAiB,KAAK,EAAtB,CAA3C,CAAb;AAAA;AARQ,OAAnB;;AAWA,aAAO;AACL,cAAM;AADD,OAAP;AAGD;;;uCAEkB;AAAA;;AACjB,aAAO;AACL,wBAAgB;AAAA,iBAAM,OAAK,cAAL,EAAN;AAAA,SADX;AAEL,2BAAmB;AAAA,iBAAM,OAAK,iBAAL,EAAN;AAAA;AAFd,OAAP;AAID;;;;;AAEH;;;;;;;;;;;;AAUe,SAAS,gCAAT,QAAuD;AAAA,MAAX,OAAW,SAAX,OAAW;;AACpE,MAAM,0BAA0B,IAAI,UAAJ,CAAe,EAAE,gBAAF,EAAf,CAAhC;AACA,SAAO,wBAAwB,gBAAxB,EAAP;AACD","file":"classes.files.fields.factory.js","sourcesContent":["import fs from 'fs';\nimport Promise from 'bluebird';\n\nimport {\n  GraphQLID,\n  GraphQLNonNull,\n} from 'graphql';\n\nimport { FileType } from '../types/file';\nimport { objectIdFromData } from '../utils/graphql';\n\nPromise.promisifyAll(fs);\n\nexport class FileFields {\n  /**\n   * @param storage\n   */\n  constructor({ storage }) {\n    if (!storage) {\n      throw new Error('Storage is missing !');\n    }\n\n    this._storage = storage;\n  }\n\n  getMutationFields() {\n    return {};\n  }\n\n  getQueryFields() {\n    const getOneFile = {\n      name: 'file',\n      type: FileType,\n      args: {\n        id: {\n          type: new GraphQLNonNull(GraphQLID),\n        },\n      },\n      resolve: (_, args) => this._storage.files.getOneFileMetadataById(objectIdFromData(args.id)),\n    };\n\n    return {\n      file: getOneFile,\n    };\n  }\n\n  getFieldsGetters() {\n    return {\n      getQueryFields: () => this.getQueryFields(),\n      getMutationFields: () => this.getMutationFields(),\n    };\n  }\n}\n/**\n * @name GraphQLFieldsGetters\n * @type Object\n * @property {function} getQueryFields\n * @property {function} getMutationFields\n *\n * Create two functions, one for \"query\", the other for \"mutation\"\n * @param storage\n * @returns {GraphQLFieldsGetters}\n */\nexport default function classesFilesFieldsGettersFactory({ storage }) {\n  const classFilesFieldsFactory = new FileFields({ storage });\n  return classFilesFieldsFactory.getFieldsGetters();\n}\n"]}