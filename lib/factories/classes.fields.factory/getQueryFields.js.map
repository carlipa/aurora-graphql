{"version":3,"sources":["../../../src/factories/classes.fields.factory/getQueryFields.js"],"names":[],"mappings":"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","file":"getQueryFields.js","sourcesContent":["import Promise from 'bluebird';\n\nimport {\n  GraphQLID,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLInputObjectType,\n} from 'graphql';\n\nimport {\n  connectionArgs,\n  connectionFromPromisedArray,\n} from 'graphql-relay';\n\nimport {\n  camelCase,\n  cloneDeep,\n  each,\n  find,\n  fromPairs,\n  isArray,\n  keys,\n  map,\n  mapKeys,\n  reduce,\n  snakeCase,\n  toPairs,\n  toUpper,\n  upperFirst,\n} from 'lodash';\n\nimport { MixedType, ObjectIDType } from '../../types/common';\nimport { objectIdFromData } from '../../utils/graphql';\n\nimport { ClassesFieldsHelper } from './';\n\n/**\n * Generate a function to be used as \"getQueryFields\" in the schema\n * @private\n */\nexport default function getQueryFields(classesFieldsHelper) {\n  if (!(classesFieldsHelper instanceof ClassesFieldsHelper)) {\n    throw new Error('`classesFieldsHelper` must be an instance `ClassesFieldsHelper`');\n  }\n\n  // return () => {\n  const queries = {};\n\n  classesFieldsHelper._classesHelpers.forEach(({\n    name: className,\n    plural,\n    getFields,\n    getSortableFieldsName,\n    getFilterableFields,\n  }) => {\n    // Pluralize the field name\n    const pluralName = camelCase(plural || `${className}s`);\n\n    if (pluralName === camelCase(className)) {\n      throw new Error(`Cannot create fields for ${className}, queries for one and multiple have the same name !`);\n    }\n\n    /**\n     * Given a field name, return an object for the orderBy argument\n     * @param fieldName the field name\n     * @param inData if true, will add \"data.\" to the field name (default: false)\n     * @returns {{}}\n     */\n    const getOrderByEntries = (fieldName, inData = false) => {\n      const asc = toUpper(snakeCase(`${fieldName}Asc`));\n      const desc = toUpper(snakeCase(`${fieldName}Desc`));\n\n      const _fieldName = inData ? `data.${fieldName}` : fieldName;\n\n      return {\n        [asc]: { value: { [_fieldName]: 1 } },\n        [desc]: { value: { [_fieldName]: -1 } },\n      };\n    };\n\n    // Create the orderBy values, using \"createdAt\", \"updatedAt\" and the class sortable fields\n    let orderByEnumValues = { ...getOrderByEntries('createdAt'), ...getOrderByEntries('updatedAt') };\n    map(getSortableFieldsName(), (fieldName) => getOrderByEntries(fieldName, true)).forEach((idxValues) => {\n      orderByEnumValues = { ...orderByEnumValues, ...idxValues };\n    });\n    const orderByType = new GraphQLEnumType({\n      name: `order${upperFirst(pluralName)}By`,\n      values: orderByEnumValues,\n    });\n\n    // Create the filters type\n    const filtersFields = {};\n    const namePrefix = `filter${upperFirst(pluralName)}With`;\n\n    map(getFilterableFields(), (field, fieldName) => {\n      const fieldType = ClassesFieldsHelper._graphQLTypeFromString(field.type ? field.type : field);\n\n      const nameWithFieldName = `${namePrefix}${upperFirst(fieldName)}`;\n\n      switch (fieldType) {\n        case GraphQLBoolean:\n          filtersFields[fieldName] = {\n            type: new GraphQLInputObjectType({\n              name: `${nameWithFieldName}Boolean`,\n              fields: {\n                eq: { type: GraphQLBoolean },\n              },\n            }),\n          };\n          break;\n\n        case ObjectIDType:\n          filtersFields[fieldName] = {\n            type: new GraphQLInputObjectType({\n              name: `${nameWithFieldName}ObjectID`,\n              fields: {\n                in: { type: new GraphQLList(ObjectIDType) },\n                eq: { type: ObjectIDType },\n              },\n            }),\n          };\n          break;\n\n        case GraphQLString:\n          filtersFields[fieldName] = {\n            type: new GraphQLInputObjectType({\n              name: `${nameWithFieldName}String`,\n              fields: {\n                in: { type: new GraphQLList(GraphQLString) },\n                eq: { type: GraphQLString },\n                regexp: { type: GraphQLString },\n              },\n            }),\n          };\n          break;\n\n        case GraphQLInt:\n        case GraphQLFloat:\n          filtersFields[fieldName] = {\n            type: new GraphQLInputObjectType({\n              name: `${nameWithFieldName}Number`,\n              fields: {\n                in: { type: new GraphQLList(GraphQLFloat) },\n                eq: { type: GraphQLFloat },\n                gt: { type: GraphQLFloat },\n                gte: { type: GraphQLFloat },\n                lt: { type: GraphQLFloat },\n                lte: { type: GraphQLFloat },\n              },\n            }),\n          };\n          break;\n\n        default:\n          // Nothing\n          break;\n      }\n    });\n\n    const filtersType = new GraphQLInputObjectType({\n      name: `${namePrefix}`,\n      fields: filtersFields,\n    });\n\n    // If the class doesn't have any filter, using `{}` as `filters` field would throw an error\n    // This little hack prevents it\n    const filtersHolder = !keys(filtersFields).length ? {} : {\n      filters: {\n        type: filtersType,\n      },\n    };\n\n    // lowerCaseName\n    const lcName = className.toLowerCase();\n\n    // All\n    queries[pluralName] = {\n      type: classesFieldsHelper._connections[lcName],\n      args: {\n        ...connectionArgs,\n        ...filtersHolder, // Here we destructure our potentially empty object\n        orderBy: {\n          type: new GraphQLList(orderByType),\n        },\n      },\n      resolve: (_, args) => {\n        // Create query\n        const query = {};\n        each(args.filters, (filter, fieldName) => {\n          const safeFilter = cloneDeep(filter);\n\n          // RegExp process\n          if (safeFilter.regexp) {\n            const matchedRegexp = safeFilter.regexp.match(/\\/(.*)\\/(\\w*)/);\n\n            if (!matchedRegexp) {\n              throw new Error(`Invalid RegExp at ${className}/${fieldName}`);\n            }\n\n            const motif = matchedRegexp[1];\n            const flags = matchedRegexp[2];\n\n            delete safeFilter.regexp;\n            safeFilter.eq = new RegExp(motif, flags);\n          }\n\n          // If we explicitly demand a field, the `in` property is ignored\n          // We use `in` on an array[1], since mongoose doesn't use `$eq` queries\n          // TODO better implementation\n          if (safeFilter.eq) {\n            safeFilter.in = [safeFilter.eq];\n            delete safeFilter.eq;\n          }\n\n          query[`data.${fieldName}`] = mapKeys(safeFilter, (value, key) => `$${key}`);\n        });\n\n        // Merge orderBy's\n        const sort = reduce(args.orderBy, (soFar, value) => Object.assign(soFar, value), {});\n\n        // Get all the data (ids only), using the optional sort\n        const getDataPromise = classesFieldsHelper._getAllClassData(className, { query, sort });\n        // Apply \"connectionFromPromisedArray\" to the result, which will filter the results\n        return connectionFromPromisedArray(getDataPromise, args)\n          .then((result) => {\n            // Then, we query the real data\n            const classesIds = map(result.edges, (edge) => edge.node._id);\n            const edgesPromise = classesFieldsHelper._getManyClassDataByIds(className, classesIds)\n              .then((results) => map(result.edges, (edge) => ({\n                ...edge,\n                node: find(results, { mongoId: edge.node._id.toString() }),\n              })));\n\n            // Total count\n            const countPromise = getDataPromise.then((results) => results.length);\n\n            return Promise.props({ edges: edgesPromise, totalCount: countPromise })\n              .then(({ edges, totalCount }) => ({\n                ...result,\n                edges,\n                totalCount,\n              }));\n          });\n      },\n    };\n\n    // One\n    queries[camelCase(className)] = {\n      type: classesFieldsHelper._types[lcName],\n      args: {\n        ...getFields({ resolveRelations: false, disableNonNull: true }),\n        id: {\n          type: GraphQLID,\n        },\n      },\n      resolve: (_, args) => {\n        const mongoId = args.id ? objectIdFromData(args.id) : null;\n\n        function parseValue(value) {\n          try {\n            return objectIdFromData(value);\n          } catch (err) {\n            return value;\n          }\n        }\n\n        if (mongoId) {\n          return classesFieldsHelper._getClassDataById(className, mongoId);\n        }\n        // Map both keys and values\n        const query = fromPairs(map(toPairs(args), ([key, value]) => {\n          if (isArray(value)) {\n            return [\n              `data.${key}`,\n              map(value, parseValue),\n            ];\n          }\n\n          return [\n            `data.${key}`,\n            parseValue(value),\n          ];\n        }));\n\n        return classesFieldsHelper._getClassData(className, query);\n      },\n    };\n\n    // One Raw\n    queries[`${camelCase(className)}Raw`] = {\n      type: MixedType,\n      description: `Returns a pure javascript object of \"${className}\", as it is stored in the database,\n          without any GraphQL parsing. Useful for version upgrade`,\n      args: {\n        id: {\n          type: new GraphQLNonNull(GraphQLID),\n        },\n      },\n      resolve: (_, args) => {\n        const mongoId = args.id ? objectIdFromData(args.id) : null;\n        return classesFieldsHelper._getClassDataById(className, mongoId, { raw: true });\n      },\n    };\n  });\n\n  return queries;\n  // };\n}\n"]}