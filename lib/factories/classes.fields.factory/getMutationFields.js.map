{"version":3,"sources":["../../../src/factories/classes.fields.factory/getMutationFields.js"],"names":[],"mappings":"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","file":"getMutationFields.js","sourcesContent":["import Promise from 'bluebird';\n\nimport {\n  GraphQLID,\n  GraphQLNonNull,\n  GraphQLString,\n} from 'graphql';\n\nimport {\n  mutationWithClientMutationId,\n} from 'graphql-relay';\n\nimport {\n  camelCase,\n  find,\n  fromPairs,\n  isArray,\n  mapKeys,\n  omit,\n  toPairs,\n} from 'lodash';\n\nimport { objectIdFromData } from '../../utils/graphql';\n\nimport { ClassesFieldsHelper } from './';\n\n/**\n * Generate a function to be used as \"getMutationFields\" in the schema\n * @private\n */\nexport default function getMutationFields(classesFieldsHelper, queryFields) {\n  if (!(classesFieldsHelper instanceof ClassesFieldsHelper)) {\n    throw new Error('`classesFieldsHelper` must be an instance `ClassesFieldsHelper`');\n  }\n\n  // return () => {\n  const mutations = {};\n\n  classesFieldsHelper._classesHelpers.forEach(({\n    name: className,\n    plural,\n    getFields,\n    getFieldsWithRelations,\n  }) => {\n    // Pluralize the field name\n    const pluralName = camelCase(plural || `${className}s`);\n\n    const lcName = className.toLowerCase();\n\n    const createFieldName = `create${className}`;\n    const createdFieldName = `created${className}`;\n    const updateFieldName = `update${className}`;\n    const updatedFieldName = `updated${className}`;\n    const replaceFieldName = `replace${className}`;\n    const replacedFieldName = `replaced${className}`;\n    const removeFieldName = `remove${className}`;\n    const removedFieldIdName = `removed${className}Id`;\n    const recoverFieldName = `recover${className}`;\n    const recoveredFieldName = `recovered${className}`;\n\n    /**\n     * Given an input, parse the potential relations in it\n     * (ie: replace them with the Mongo Id, and raise an error if the reference is missing)\n     * @param input the GraphQL input\n     * @returns {Promise}\n     */\n    const parseInputRelations = (input) => {\n      const fieldsWithRelations = getFieldsWithRelations();\n\n      // Convert the object { key: value } to an array [key, value] (for bluebird#map)\n      // We don't want the \"clientMutationId\", which is GraphQL specific\n      const fieldsData = toPairs(omit(input, 'clientMutationId'));\n\n      return Promise\n        .map(fieldsData, ([fieldName, data]) => {\n          const fieldWithRelation = find(fieldsWithRelations, (field) => field.fieldName === fieldName);\n\n          if (fieldWithRelation) {\n            if (isArray(data)) {\n              return Promise\n                .map(data, (x) => classesFieldsHelper._getMongoIdFromData(fieldWithRelation.className, x))\n                .then((ids) => ([fieldName, ids]));\n            }\n            return classesFieldsHelper\n              ._getMongoIdFromData(fieldWithRelation.className, data)\n              .then((id) => ([fieldName, id]));\n          }\n\n          return [fieldName, data];\n        })\n        // Convert back the array [key, value] to an object { key: value }\n        .then(fromPairs);\n    };\n\n    // Create\n    mutations[createFieldName] = mutationWithClientMutationId({\n      name: createFieldName,\n      inputFields: {\n        ...getFields({ resolveRelations: false }),\n      },\n      outputFields: {\n        [createdFieldName]: {\n          type: classesFieldsHelper._types[lcName],\n          resolve: (payload) => classesFieldsHelper._getClassDataById(className, payload.mongoId),\n        },\n        [pluralName]: queryFields[pluralName],\n      },\n      mutateAndGetPayload: (input, context, { rootValue: { allowMutation } }) => {\n        if (!allowMutation) {\n          throw new Error(`Usage of \"${createFieldName}\" mutation is not allowed`);\n        }\n\n        return parseInputRelations(input)\n          .then((fields) => classesFieldsHelper._getModel(className).create({\n            className: [className],\n            data: fields,\n            _classVersion: classesFieldsHelper._classes.version,\n          }))\n          .then((created) => ({ mongoId: created.id }));\n      },\n    });\n\n    // Update\n    mutations[updateFieldName] = mutationWithClientMutationId({\n      name: updateFieldName,\n      inputFields: {\n        ...getFields({ resolveRelations: false, disableNonNull: true }),\n        id: {\n          type: new GraphQLNonNull(GraphQLID),\n        },\n      },\n      outputFields: {\n        [updatedFieldName]: {\n          type: classesFieldsHelper._types[lcName],\n          resolve: (payload) => classesFieldsHelper._getClassDataById(className, payload.mongoId),\n        },\n        [pluralName]: queryFields[pluralName],\n      },\n      mutateAndGetPayload: (input, context, { rootValue: { allowMutation } }) => {\n        if (!allowMutation) {\n          throw new Error(`Usage of \"${updateFieldName}\" mutation is not allowed`);\n        }\n\n        return parseInputRelations(input)\n        // Remove the id field\n          .then((fields) => omit(fields, 'id'))\n          // Map all data keys to add a \"data\" suffix\n          .then((fields) => mapKeys(fields, (_, key) => `data.${key}`))\n          .then((fields) => {\n            const _id = objectIdFromData(input.id);\n\n            return classesFieldsHelper._getModel(className)\n              .update({ _id }, {\n                $set: {\n                  ...fields,\n                  _classVersion: classesFieldsHelper._classes.version,\n                },\n              })\n              .then(() => ({ mongoId: _id }));\n          });\n      },\n    });\n\n    // Replace\n    mutations[replaceFieldName] = mutationWithClientMutationId({\n      name: replaceFieldName,\n      inputFields: {\n        ...getFields({ resolveRelations: false, disableNonNull: false }),\n        id: {\n          type: new GraphQLNonNull(GraphQLID),\n        },\n      },\n      outputFields: {\n        [replacedFieldName]: {\n          type: classesFieldsHelper._types[lcName],\n          resolve: (payload) => classesFieldsHelper._getClassDataById(className, payload.mongoId),\n        },\n        [pluralName]: queryFields[pluralName],\n      },\n      mutateAndGetPayload: (input, context, { rootValue: { allowMutation } }) => {\n        if (!allowMutation) {\n          throw new Error(`Usage of \"${replaceFieldName}\" mutation is not allowed`);\n        }\n\n        return parseInputRelations(input)\n        // Remove the id field\n          .then((fields) => omit(fields, 'id'))\n          .then((fields) => {\n            const _id = objectIdFromData(input.id);\n\n            return classesFieldsHelper._getModel(className)\n              .update({ _id }, {\n                $set: {\n                  data: fields,\n                  _classVersion: classesFieldsHelper._classes.version,\n                },\n              })\n              .then(() => ({ mongoId: _id }));\n          });\n      },\n    });\n\n    // Remove\n    mutations[removeFieldName] = mutationWithClientMutationId({\n      name: removeFieldName,\n      inputFields: {\n        id: {\n          type: new GraphQLNonNull(GraphQLID),\n        },\n      },\n      outputFields: {\n        [removedFieldIdName]: {\n          type: GraphQLString,\n          resolve: (payload) => payload.mongoId,\n        },\n        [pluralName]: queryFields[pluralName],\n      },\n      mutateAndGetPayload: (input, context, { rootValue: { allowMutation } }) => {\n        if (!allowMutation) {\n          throw new Error(`Usage of \"${removeFieldName}\" mutation is not allowed`);\n        }\n\n        const _id = objectIdFromData(input.id);\n\n        return classesFieldsHelper._getModel(className)\n          .update({ _id }, { $set: { _deleted: true } })\n          .then(() => ({ mongoId: _id }));\n      },\n    });\n\n    // Recover\n    mutations[recoverFieldName] = mutationWithClientMutationId({\n      name: recoverFieldName,\n      inputFields: {\n        id: {\n          type: new GraphQLNonNull(GraphQLID),\n        },\n      },\n      outputFields: {\n        [recoveredFieldName]: {\n          type: classesFieldsHelper._types[lcName],\n          resolve: (payload) => classesFieldsHelper._getClassDataById(className, payload.mongoId),\n        },\n        [pluralName]: queryFields[pluralName],\n      },\n      mutateAndGetPayload: (input, context, { rootValue: { allowMutation } }) => {\n        if (!allowMutation) {\n          throw new Error(`Usage of \"${recoverFieldName}\" mutation is not allowed`);\n        }\n\n        const _id = objectIdFromData(input.id);\n\n        // TypeModel.update({ _id }, { $set: { _deleted: false } });\n        return classesFieldsHelper._getModel(className)\n          .update({ _id }, { $set: { _deleted: false } })\n          .then(() => ({ mongoId: _id }));\n      },\n    });\n  });\n\n  return mutations;\n  // };\n}\n"]}