{"version":3,"sources":["../../../src/factories/classes.fields.factory/generateTypesAndConnections.js"],"names":[],"mappings":";;;;;;;;kBAoBwB,2B;;AApBxB;;AAOA;;AAOA;;AAEA;;;;AAIe,SAAS,2BAAT,CAAqC,mBAArC,EAA0D;AACvE,MAAI,EAAE,oDAAF,CAAJ,EAA2D;AACzD,UAAM,IAAI,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED;;AALuE,yBAM7C,mCACxB,UAAC,QAAD,EAAc;AAAA,wBACS,gCAAa,QAAb,CADT;;AAAA,QACJ,IADI,iBACJ,IADI;AAAA,QACE,EADF,iBACE,EADF;;AAEZ,WAAO,oBAAoB,iBAApB,CAAsC,IAAtC,EAA4C,EAA5C,CAAP;AACD,GAJuB,EAKxB,UAAC,GAAD;AAAA,WAAS,oBAAoB,MAApB,CAA2B,IAAI,UAAJ,CAAe,WAAf,EAA3B,CAAT;AAAA,GALwB,CAN6C;;AAAA,MAM/D,aAN+D,oBAM/D,aAN+D;;AAcvE;;AACA,sBAAoB,eAApB,CAAoC,OAApC,CAA4C,gBAAoC;AAAA,QAA3B,SAA2B,QAAjC,IAAiC;AAAA,QAAhB,SAAgB,QAAhB,SAAgB;;AAC9E,QAAM,cAAc,UAAU,WAAV,EAApB;;AAEA,wBAAoB,OAApB,CAA4B,WAA5B,EAAyC,+BAAsB;AAC7D,YAAM,SADuD;AAE7D,0BAAkB,SAF2C;AAG7D,cAAQ;AAAA,4BACH,UAAU,EAAE,gBAAgB,IAAlB,EAAV,CADG;AAEN,cAAI,iCAAc,SAAd,CAFE;AAGN,mBAAS;AACP;AADO,WAHH;AAMN,qBAAW;AACT;AADS,WANL;AASN,qBAAW;AACT;AADS,WATL;AAYN,sBAAY;AACV,kBAAM;AADI,WAZN;AAeN,yBAAe;AACb,kBAAM;AADO;AAfT;AAAA,OAHqD;AAsB7D,kBAAY,CAAC,aAAD;AAtBiD,KAAtB,CAAzC;;AAyBA;;;;AAIA,QAAM,cAAc,yCAAsB;AACxC,YAAM,SADkC;AAExC,gBAAU,oBAAoB,MAApB,CAA2B,WAA3B,CAF8B;AAGxC,wBAAkB;AAAA,eAAO;AACvB,sBAAY;AACV,qCADU;AAEV,qBAAS,iBAAC,UAAD;AAAA,qBAAgB,WAAW,UAAX,IAAyB,CAAzC;AAAA,aAFC;AAGV,yBAAa;AAHH;AADW,SAAP;AAAA;AAHsB,KAAtB,CAApB;AAWA,wBAAoB,aAApB,CAAkC,WAAlC,EAA+C,YAAY,cAA3D;AACD,GA5CD;AA6CD","file":"generateTypesAndConnections.js","sourcesContent":["import {\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLInt,\n} from 'graphql';\n\nimport {\n  connectionDefinitions,\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nimport { ClassesFieldsHelper } from './';\n\n/**\n * Populate the \"factory._types\" and \"factory._connections\" object\n * @private\n */\nexport default function generateTypesAndConnections(classesFieldsHelper) {\n  if (!(classesFieldsHelper instanceof ClassesFieldsHelper)) {\n    throw new Error('`classesFieldsHelper` must be an instance `ClassesFieldsHelper`');\n  }\n\n  // Create the nodeInterface and nodeField\n  const { nodeInterface } = nodeDefinitions(\n    (globalId) => {\n      const { type, id } = fromGlobalId(globalId);\n      return classesFieldsHelper._getClassDataById(type, id);\n    },\n    (obj) => classesFieldsHelper._types[obj._className.toLowerCase()]\n  );\n\n  // For each classes, create its type, and add its connection to the connections list\n  classesFieldsHelper._classesHelpers.forEach(({ name: className, getFields }) => {\n    const lcClassName = className.toLowerCase();\n\n    classesFieldsHelper.setType(lcClassName, new GraphQLObjectType({\n      name: className,\n      description: `A ${className}`,\n      fields: () => ({\n        ...getFields({ disableNonNull: true }),\n        id: globalIdField(className),\n        mongoId: {\n          type: GraphQLString,\n        },\n        createdAt: {\n          type: GraphQLString,\n        },\n        updatedAt: {\n          type: GraphQLString,\n        },\n        _className: {\n          type: new GraphQLNonNull(GraphQLString),\n        },\n        _classVersion: {\n          type: new GraphQLNonNull(GraphQLInt),\n        },\n      }),\n      interfaces: [nodeInterface],\n    }));\n\n    /**\n     * The connection definition for this class\n     * @prop connectionType the graphQl type for the connection\n     */\n    const definitions = connectionDefinitions({\n      name: className,\n      nodeType: classesFieldsHelper._types[lcClassName],\n      connectionFields: () => ({\n        totalCount: {\n          type: GraphQLInt,\n          resolve: (connection) => connection.totalCount || 0,\n          description: 'A count of the total number of objects in this connection, ignoring pagination.',\n        },\n      }),\n    });\n    classesFieldsHelper.setConnection(lcClassName, definitions.connectionType);\n  });\n}\n"]}