{"version":3,"sources":["../../../src/factories/classes.fields.factory/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Types } from 'mongoose';\n\nimport {\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLFloat,\n} from 'graphql';\n\nimport {\n  assign,\n  cloneDeep,\n  map,\n  omit,\n} from 'lodash';\n\nimport ClassSchema from '../../schemas/class.schema';\n\nimport { FileType, FileConnection } from '../../types/file';\nimport { MixedType, ObjectIDType } from '../../types/common';\nimport { objectIdFromData } from '../../utils/graphql';\n\nimport generateClassesHelpers from './generateClassesHelpers';\nimport generateTypesAndConnections from './generateTypesAndConnections';\nimport getQueryFields from './getQueryFields';\nimport getMutationFields from './getMutationFields';\n\nexport class ClassesFieldsHelper {\n  /** @private */\n  _models = {};\n  /** @private */\n  _connections = {\n    file: FileConnection,\n  };\n  /** @private */\n  _types = {\n    file: FileType,\n  };\n  /** @private */\n  _classesHelpers = [];\n\n  static RESERVED_CLASS_NAMES = [\n    'File',\n  ];\n\n  static RESERVED_CLASS_PREFIX = [\n    '_',\n  ];\n\n  static RESERVED_FIELDS = [\n    'id',\n    '_id',\n    'mongoId',\n    'createdAt',\n    'updatedAt',\n    'clientMutationId',\n    'options',\n    'fields',\n  ];\n\n  static RESERVED_FIELDS_PREFIX = [\n    '_',\n  ];\n\n  /**\n   * @param storage\n   * @param classes\n   */\n  constructor({ storage, classes }) {\n    if (!storage) {\n      throw new Error('Storage is missing !');\n    }\n    if (!classes) {\n      throw new Error('Classes are missing !');\n    }\n    if (!classes.definitions) {\n      throw new Error('Classes definition are missing !');\n    }\n\n    this._storage = storage;\n    this._classes = classes;\n  }\n\n  /**\n   * Convert stringed type to GraphQL type\n   * @private\n   */\n  static _graphQLTypeFromString(type) {\n    switch (type.toLowerCase()) {\n      case 'string':\n        return GraphQLString;\n      case 'relation':\n        return ObjectIDType;\n      case 'boolean':\n        return GraphQLBoolean;\n      case 'int':\n      case 'integer':\n        return GraphQLInt;\n      case 'float':\n      case 'number':\n        return GraphQLFloat;\n      case 'object':\n      case 'mixed':\n        return MixedType;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Type setter\n   */\n  setType(typeName, type) {\n    this._types[typeName] = type;\n  }\n\n  /**\n   * Connection setter\n   */\n  setConnection(connectionName, connection) {\n    this._connections[connectionName] = connection;\n  }\n\n  /**\n   * Class Helper adder\n   */\n  addClassHelper(classHelper) {\n    this._classesHelpers.push(classHelper);\n  }\n\n  /**\n   * Parse a class data from mongoose, into an object for relay\n   * @param result the mongodb result\n   * @param className the class name\n   * @returns {Object}\n   * @private\n   */\n  _parseClassData(result, className) {\n    // Get the real className (Capitalized)\n    const _className = this._types[className.toLowerCase()].name;\n\n    if (!result) {\n      throw new Error(`Object \"${_className}\" not found`);\n    }\n    if (result._deleted) {\n      throw new Error(`Object \"${_className}\" marked as removed`);\n    }\n\n    const data = cloneDeep(result.data);\n\n    const resultWithoutData = omit(result, 'data');\n\n    resultWithoutData.id = result._id;\n    resultWithoutData.mongoId = result._id.toString();\n\n    resultWithoutData.createdAt = result.createdAt.toISOString();\n    resultWithoutData.updatedAt = result.updatedAt.toISOString();\n\n    resultWithoutData._className = _className;\n\n    return assign(data, resultWithoutData);\n  }\n\n  /**\n   * Returns the mongoose schema of a class, for this \"className\"\n   * @private\n   */\n  _getModel(className) {\n    if (!this._models[className]) {\n      this._models[className] = this._storage.getModel(className, ClassSchema);\n    }\n\n    return this._models[className];\n  }\n\n  /**\n   * Get all the non-deleted elements of a class, but only their IDs\n   * @param className\n   * @param sort an optional sort object\n   * @param query an optional query object\n   * @private\n   */\n  _getAllClassData(className, { query, sort }) {\n    return this._getModel(className).find({ ...query, _deleted: false }, { _id: 1 }, { lean: true, sort });\n  }\n\n  /**\n   * Get an element of a class (or a file), by its ID\n   * @param className\n   * @param id\n   * @param raw if true, will only returns class data (no id, timestamps, etc)\n   * @private\n   */\n  _getClassDataById(className, id, { raw = false } = {}) {\n    switch (className) {\n      case 'file':\n        return this._storage.files.getOneFileMetadataById(id);\n\n      default:\n        return this._getModel(className).findOne({ _id: new Types.ObjectId(id.toString()) }, {}, { lean: true })\n          .then((classData) => {\n            if (raw) {\n              // We parse even if we want raw data, for error handling (we clone since we don't want it to mutate)\n              this._parseClassData(cloneDeep(classData), className);\n              return { ...classData.data, mongoId: classData._id };\n            }\n            return this._parseClassData(classData, className);\n          });\n    }\n  }\n\n  /**\n   * Get multiple elements of a class by their IDs\n   * @param className\n   * @param ids\n   * @private\n   */\n  _getManyClassDataByIds(className, ids) {\n    const _ids = map(ids, (id) => new Types.ObjectId(id.toString()));\n\n    return this._getModel(className)\n      .findAsync({ _id: { $in: _ids } }, {}, { lean: true })\n      .map((classData) => this._parseClassData(classData, className));\n  }\n\n  /**\n   * Get an element of a class, using \"query\"\n   * @param className\n   * @param query the mongo query\n   * @private\n   */\n  _getClassData(className, query) {\n    return this._getModel(className).findOne({ ...query }, {}, { lean: true }).exec()\n      .then((data) => this._parseClassData(data, className));\n  }\n\n  /**\n   * Convert the `data` into a mongo ObjectId, and check if the object of the `fieldClassName` exits\n   * @param fieldClassName\n   * @param data\n   * @returns {Promise}\n   * @private\n   */\n  _getMongoIdFromData(fieldClassName, data) {\n    const id = objectIdFromData(data);\n\n    return this._getClassDataById(fieldClassName, id)\n      .then((result) => {\n        if (!result) {\n          throw new Error(`There is no \"${fieldClassName}\" with id \"${id}\" !`);\n        }\n        return id;\n      });\n  }\n}\n\n/**\n * @name GraphQLFieldsGetters\n * @type Object\n * @property {function} getQueryFields\n * @property {function} getMutationFields\n *\n * Using the \"classesDefinition\", create two functions, one for \"query\", the other for \"mutation\"\n * @param storage\n * @param classes\n * @returns {GraphQLFieldsGetters}\n */\nexport default function classesFieldsGettersFactory({ storage, classes }) {\n  const classesFieldsHelper = new ClassesFieldsHelper({ storage, classes });\n\n  generateClassesHelpers(classesFieldsHelper);\n  generateTypesAndConnections(classesFieldsHelper);\n\n  const queryFields = getQueryFields(classesFieldsHelper);\n  const mutationFields = getMutationFields(classesFieldsHelper, queryFields);\n\n  return {\n    getQueryFields: () => queryFields,\n    getMutationFields: () => mutationFields,\n  };\n}\n"]}